/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SignProvider as PrismaSignProvider } from "@prisma/client";

export class SignProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SignProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.signProvider.count(args);
  }

  async signProviders(
    args: Prisma.SignProviderFindManyArgs
  ): Promise<PrismaSignProvider[]> {
    return this.prisma.signProvider.findMany(args);
  }
  async signProvider(
    args: Prisma.SignProviderFindUniqueArgs
  ): Promise<PrismaSignProvider | null> {
    return this.prisma.signProvider.findUnique(args);
  }
  async createSignProvider(
    args: Prisma.SignProviderCreateArgs
  ): Promise<PrismaSignProvider> {
    return this.prisma.signProvider.create(args);
  }
  async updateSignProvider(
    args: Prisma.SignProviderUpdateArgs
  ): Promise<PrismaSignProvider> {
    return this.prisma.signProvider.update(args);
  }
  async deleteSignProvider(
    args: Prisma.SignProviderDeleteArgs
  ): Promise<PrismaSignProvider> {
    return this.prisma.signProvider.delete(args);
  }
}
